// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Stocks.Entities;

#nullable disable

namespace Stocks.Entities.Migrations
{
    [DbContext(typeof(StocksDbContext))]
    partial class StocksDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Stocks.Entities.Authorization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExpiresIn")
                        .HasColumnType("int");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RefreshTokenExpiresIn")
                        .HasColumnType("int");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TokenType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Authorization");
                });

            modelBuilder.Entity("Stocks.Entities.CurrentBalances", b =>
                {
                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("AccruedInterest")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("BondValue")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("CashAvailableForTrading")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("CashAvailableForWithdrawal")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("CashBalance")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("CashCall")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("CashDebitCallValue")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("CashReceipts")
                        .HasColumnType("decimal(18,5)");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<decimal>("LiquidationValue")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("LongMarketValue")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("LongNonMarginableMarketValue")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("LongOptionMarketValue")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("MoneyMarketFund")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("PendingDeposits")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("Savings")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("ShortMarketValue")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("ShortOptionMarketValue")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("TotalCash")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("UnsettledCash")
                        .HasColumnType("decimal(18,5)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("AccountId");

                    b.ToTable("CurrentBalance");
                });

            modelBuilder.Entity("Stocks.Entities.Instrument", b =>
                {
                    b.Property<string>("Exchange")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AssetType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cusip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Exchange", "Symbol");

                    b.ToTable("Instrument");
                });

            modelBuilder.Entity("Stocks.Entities.Position", b =>
                {
                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Exchange")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("AveragePrice")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("CurrentDayProfitLoss")
                        .HasColumnType("decimal(18,5)");

                    b.Property<double>("CurrentDayProfitLossPercentage")
                        .HasColumnType("float");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<double>("LongQuantity")
                        .HasColumnType("float");

                    b.Property<double>("MarketValue")
                        .HasColumnType("float");

                    b.Property<double>("SettledLongQuantity")
                        .HasColumnType("float");

                    b.Property<double>("SettledShortQuantity")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuantity")
                        .HasColumnType("float");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("AccountId", "Exchange", "Symbol");

                    b.HasIndex("Exchange", "Symbol");

                    b.ToTable("Position");
                });

            modelBuilder.Entity("Stocks.Entities.PriceHistory", b =>
                {
                    b.Property<string>("Exchange")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Close")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("High")
                        .HasColumnType("decimal(18,5)");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<decimal>("Low")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("Open")
                        .HasColumnType("decimal(18,5)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<long>("Volume")
                        .HasColumnType("bigint");

                    b.HasKey("Exchange", "Symbol", "DateTime");

                    b.ToTable("PriceHistory");
                });

            modelBuilder.Entity("Stocks.Entities.SecuritiesAccount", b =>
                {
                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<bool>("IsClosingOnlyRestricted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDayTrader")
                        .HasColumnType("bit");

                    b.Property<int>("RoundTrips")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("AccountId");

                    b.ToTable("SecuritiesAccount");
                });

            modelBuilder.Entity("Stocks.Entities.Setting", b =>
                {
                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Type", "Key");

                    b.ToTable("Setting");
                });

            modelBuilder.Entity("Stocks.Entities.CurrentBalances", b =>
                {
                    b.HasOne("Stocks.Entities.SecuritiesAccount", "SecuritiesAccount")
                        .WithOne("CurrentBalances")
                        .HasForeignKey("Stocks.Entities.CurrentBalances", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SecuritiesAccount");
                });

            modelBuilder.Entity("Stocks.Entities.Position", b =>
                {
                    b.HasOne("Stocks.Entities.SecuritiesAccount", "SecuritiesAccount")
                        .WithMany("Positions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stocks.Entities.Instrument", "Instrument")
                        .WithMany("Positions")
                        .HasForeignKey("Exchange", "Symbol")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Instrument");

                    b.Navigation("SecuritiesAccount");
                });

            modelBuilder.Entity("Stocks.Entities.PriceHistory", b =>
                {
                    b.HasOne("Stocks.Entities.Instrument", "Instrument")
                        .WithMany("PriceHistories")
                        .HasForeignKey("Exchange", "Symbol")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Instrument");
                });

            modelBuilder.Entity("Stocks.Entities.Instrument", b =>
                {
                    b.Navigation("Positions");

                    b.Navigation("PriceHistories");
                });

            modelBuilder.Entity("Stocks.Entities.SecuritiesAccount", b =>
                {
                    b.Navigation("CurrentBalances")
                        .IsRequired();

                    b.Navigation("Positions");
                });
#pragma warning restore 612, 618
        }
    }
}
